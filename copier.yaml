_version: v1.0.0

_envops:
  block_start_string: '{%'
  block_end_string: '%}'
  variable_start_string: '{{'
  variable_end_string: '}}'

license:
  type: str
  help: Choose a license
  choices:
    - MIT
    - Apache-2.0
    - Proprietary
  default: MIT

cli:
  type: bool
  help: Include a Typer-based CLI?
  default: false

python_version:
  type: str
  help: Python version for your project
  default: "3.13"

project_name:
  type: str
  help: What is your project name?
  default: My New Project
  validator: |
    {% if project_name|length < 4 or project_name|length > 40 %}
    project_name must be between 4 and 40 characters
    {% endif %}

project_slug:
  type: str
  help: "The name for the Python package (e.g., 'my_new_project')."
  # The default value is computed from project_name. The user can accept or edit it.
  default: "{{ project_name | lower | replace(' ', '_') | replace('-', '_') }}"
  # This validator ensures the name is a valid Python identifier.
  validator: |
    {% if not (project_slug | regex_search('^[a-z_][a-z0-9_]+$')) %}
      '{{ project_slug }}' is not a valid Python package name. It must start with a letter or underscore, and contain only letters, numbers, and underscores.
    {% endif %}

project_summary:
  type: str
  help: Provide a short summary of the project.
  default: "A short summary of {{ project_name }}"

module_name:
  type: str
  help: What is the Python module name?
  default: "{{ project_slug.replace('-', '_') }}"
  validator: |
    {% if module_name|length < 4 or module_name|length > 40 %}
    module_name must be between 4 and 40 characters
    {% endif %}
    {% if not (module_name | regex_search('^[a-z][a-z0-9_]+$')) %}
    module_name must start with a letter, followed one or more letters, digits or underscores (all lowercase).
    {% endif %}

author_name:
  type: str
  help: Author name
  default: Tom Dakan

description:
  type: str
  help: Project description
  default: A description of my new project.

version:
  type: str
  help: Initial version
  default: 0.1.0

run_qa_checks:
  type: bool
  help: Should I run quality checks after building?
  default: false

precommit_install:
  type: bool
  help: Install pre-commit hooks after generation?
  default: false

docker_support:
  type: bool
  help: Include docker-compose support?
  default: false

initialize_git:
  type: bool
  help: Should I initialize this project as a git repository?
  default: false

push_to_github:
  type: bool
  help: Should I publish this project to github?
  default: "{{ initialize_git }}"
  when: "{{ initialize_git }}"

github_account:
  type: str
  help: What is the github account I should use?
  default: TomDakan
  when: "{{ push_to_github }}"

use_semantic_release:
  type: bool
  help: Use python-semantic-release for automated releases? (Replaces manual 'cz bump')
  default: true

use_safety:
  type: bool
  help: Include 'safety' for dependency vulnerability checks?
  default: true

use_bandit:
  type: bool
  help: Include 'bandit' for security linting?
  default: true

use_dependabot:
  type: bool
  help: Include Dependabot configuration for automated dependency updates?
  default: true

doc_hosting_provider:
  type: str
  help: Where will the documentation be hosted?
  choices:
    - None
    - Read the Docs
  default: Read the Docs

badges:
  type: bool
  help: Add README badges (build, coverage, docs)?
  default: false
  when: doc_hosting_provider != None

badge_build:
  type: str
  help: Build badge markdown (leave blank to skip)
  default: ""
  when: badges

badge_coverage:
  type: str
  help: Coverage badge markdown (leave blank to skip)
  default: ""
  when: badges

badge_docs:
  type: str
  help: Docs badge markdown (leave blank to skip)
  default: ""
  when: badges

_dev_tools:
  - name: "pytest"
    desc: "For running the test suite."
  - name: "pytest-cov"
    desc: "For measuring test coverage."
  - name: "ruff"
    desc: "All-in-one linter, formatter, and import sorter."
  - name: "commitizen"
    desc: "For standardized, conventional commit messages, versioning, and changelog updates."
  - name: "mypy"
    desc: "For static type checking."
  - name: "python-semantic-release"
    desc: "For automated versioning, changelog generation, and releases (used in CI)."
  - name: "safety"
    desc: "For checking dependencies against known security vulnerabilities."
  - name: "bandit"
    desc: "For finding common security issues in code."

_doc_tools:
  - name: "mkdocs"
    desc: "A static site generator for project documentation."
  - name: "mkdocs-material"
    desc: "Theme for MkDocs."
  - name: "mkdocstrings[python]"
    desc: "For automatically generating API documentation from docstrings."

_pdm_scripts:
  - name: "format-check"
    cmd: "ruff format . --check"
    desc: "Check if code formatting is correct."
  - name: "format"
    cmd: "ruff format ."
    desc: "Apply code formatting."
  - name: "lint"
    cmd: "ruff check ."
    desc: "Run the linter."
  - name: "check"
    cmd: "mypy ."
    desc: "Run static type checking."
  - name: "test"
    cmd: "pytest"
    desc: "Run the test suite."
  - name: "qa"
    composite: ["format-check", "lint", "check", "test"]
    desc: "Run the full quality assurance suite."
  - name: "deploy"
    cmd: "echo 'Deploying...'" # Placeholder, replace if needed
    desc: "Placeholder for deployment tasks."
  - name: "safety-check"
    cmd: "safety check"
    desc: "Check for known security vulnerabilities in dependencies."
  - name: "export-docs-reqs"
    cmd: "pdm export --group docs --without-hashes -o docs-requirements.txt"
    desc: "Export documentation dependencies to requirements.txt for Read the Docs."

_subdirectory: template

_exclude:
  # Conditionally exclude the .env file
  - "{% if not generate_env %}.env.jinja{% endif %}"
  
  # Conditionally exclude docker support
  - "{% if not docker_support %}docker-compose.yml.jinja{% endif %}"

  # Conditionally exclude CLI files
  - "{% if not cli %}src/{{ module_name }}/cli/__main__.py.jinja{% endif %}"

  # Conditionally exclude security tools
  - "{% if not use_semantic_release %}template/{{ project_slug }}/.github/workflows/release.yaml.jinja{% endif %}"
  - "{% if not use_safety %}template/{{ project_slug }}/.github/workflows/main.yaml.jinja{% endif %}"

_tasks:
  - command: python bootstrap.py
    when: not _copier_conf.is_update

  - comand: echo "Exporting documentation requirements for Read the Docs..."
    when: not _copier_conf.is_update and doc_hosting_provider == 'Read the Docs'
  - command: pdm run export-docs-reqs
    when: not _copier_conf.is_update and doc_hosting_provider == 'Read the Docs'

  - command: echo "Removing bootstrap script..."
    when: not _copier_conf.is_update
  - command: python -c "import os; os.remove('bootstrap.py')"
    when: not _copier_conf.is_update

  - echo "Project {{ project_name }} generated with Copier!"