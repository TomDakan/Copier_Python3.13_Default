import sys
from collections.abc import Generator
from importlib import reload

import pytest

from {{ module_name }} import settings as settings_module


@pytest.fixture
def no_dotenv(monkeypatch: pytest.MonkeyPatch) -> Generator:
    """Simulate python-dotenv not being installed."""
    # Add a fake module to sys.modules to trigger the import failure
    monkeypatch.setitem(sys.modules, "dotenv", None)
    # Reload the settings module to re-run the import logic
    reload(settings_module)
    yield
    # Remove the fake module
    monkeypatch.delitem(sys.modules, "dotenv")
    # Reload the settings module again to restore the original state
    reload(settings_module)


def test_settings_no_dotenv(no_dotenv: None) -> None:
    """Test that settings load correctly when python-dotenv is not available."""
    assert settings_module.settings.app_name == "{{ project_name }}"
    assert settings_module._DOTENV_AVAILABLE is False


def test_settings_defaults() -> None:
    """Test the default settings values."""
    # Access settings via the imported module, not the old 'settings' variable
    assert settings_module.settings.app_name == "{{ project_name }}"
    assert settings_module.settings.debug is False
