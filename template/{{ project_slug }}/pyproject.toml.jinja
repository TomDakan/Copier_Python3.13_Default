[project]
name = "{{ project_slug }}"
version = "{{ version }}"
description = "{{ description }}"
authors = [
    { name = "{{ author_name }}", email = "{{ author_email }}" },
]
maintainers = [
    { name = "{{ author_name }}", email = "{{ author_email }}" },
]
requires-python = ">={{ python_version }}"
readme = "README.md"
license = { text = "{% if license == 'Proprietary' %}Proprietary{% else %}{{ license }}{% endif %}" }
keywords = ["{{ project_name }}"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3.14",
    "Operating System :: OS Independent",
]
dependencies = [
    "pydantic",
    "pydantic-settings",
{% if cli %}
    "typer",
    "rich",
{% endif -%}
]

# Optional dependencies for package CONSUMERS.
[project.optional-dependencies]
docs = [
{%- for tool in doc_tools | from_yaml %}
    "{{ tool.name }}",
{%- endfor %}
]

{% if cli %}
[project.scripts]
"{{ project_slug }}" = "{{ module_name }}.cli.__main__:app"
{% endif -%}

{% if repository_url %}
[project.urls]
Homepage = "{{ repository_url }}"
Repository = "{{ repository_url }}"
"Bug Tracker" = "{{ repository_url }}/issues"
{% endif -%}

[build-system]
requires = ["pdm-backend"]
build-backend = "pdm.backend"

[tool.pdm]
python.use_venv = true
python.venv_in_project = true

[tool.pdm.build]
# The package name (valid Python identifier, no hyphens).
packages = [{include = "{{ module_name }}", from = "src"}]

# Dependencies for project DEVELOPERS, managed by PDM.
[tool.pdm.dev-dependencies]
dev = [
{%- for tool in dev_tools | from_yaml %}
    "{{ tool.name }}",
{%- endfor %}
]
docs = [
{%- for tool in doc_tools | from_yaml %}
    "{{ tool.name }}",
{%- endfor %}
]

[tool.pdm.scripts]
{% for script in pdm_scripts | from_yaml -%}
{% if script.cmd %}
{{ script.name }} = "{{ script.cmd }}"
{% elif script.composite %}
{{ script.name }} = { composite = {{ script.composite }} }
{%- endif %}
{% endfor -%}

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --cov={{ module_name }} --cov-report=term-missing"
testpaths = [
    "tests",
]
pythonpath = [
    "src",
]

[tool.mypy]
python_version = "{{ python_version }}"
warn_return_any = true
warn_unused_configs = true

[tool.ruff]
line-length = {{ line_length }}
target-version = "py{{ python_version.replace('.', '') }}"
exclude = ["bootstrap.py"]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort (import sorting)
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]

# Note: cz bump is no longer the primary release mechanism if semantic-release is used
[tool.commitizen]
name = "cz_conventional_commits"
tag_format = "$version"
version_scheme = "semver2"
version_provider = "pep621"
update_changelog_on_bump = true
major_version_zero = true
changelog_file = "CHANGELOG.md"
bump_message = "chore(release): bump version to $new_version [skip ci]"

{% if use_semantic_release %}
[tool.semantic_release]
# Configure python-semantic-release
version_toml = ["pyproject.toml:project.version"]
branch = "main" # Or your primary branch name
changelog_file = "CHANGELOG.md"
build_command = "pip install pdm && pdm build"
dist_path = "dist/" # Where the built package is found
upload_to_pypi = true # Set to false if you don't want CI to publish
# Optional: If your repo isn't public on GitHub, you might need configuration
# for commit author, etc. See semantic-release docs.
{% endif -%}

[tool.bandit]
exclude_dirs = [".venv", ".tox", ".pytest_cache", "build", "dist"]

[tool.coverage.run]
source = ["{{ module_name }}"]
omit = [
    "tests*",
    "*/__main__.py",
]

[tool.coverage.report]
# Fail if coverage drops below 90%
fail_under = 100
show_missing = true
