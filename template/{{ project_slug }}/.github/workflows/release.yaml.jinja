name: Release

on:
  push:
    branches:
      - main # Or your primary branch

# Required for semantic-release to push tags/commits and PyPI OIDC
permissions:
  contents: write # Allow tagging and pushing changes (like CHANGELOG.md)
  id-token: write # Allow OIDC token generation for PyPI

jobs:
  release:
    runs-on: ubuntu-latest
    # Configure PyPI OIDC publishing environment (if needed)
    environment:
      name: pypi
      url: https://pypi.org/p/{{ project_slug }}

    steps:
      - uses: actions/checkout@v4
        with:
          # Fetch all history so semantic-release can analyze commits
          fetch-depth: 0
          # Use a token with write permissions to push tags/changelog updates
          {% if secrets is defined %}
          token: ${{ secrets.GITHUB_TOKEN }} # Or a PAT if needed
          {% endif %}

      - name: Set up PDM
        uses: pdm-project/setup-pdm@v4
        with:
          python-version: "{{ python_version }}"

      - name: Install dependencies (including semantic-release)
        run: pdm install --dev

      # Configure git user for semantic-release commits (e.g., updating changelog)
      - name: Configure Git User
        run: |
          {% if github is defined %}
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"
          {% else %}
          git config user.name "local-dev"
          git config user.email "local-dev@example.com"
          {% endif %}

      - name: Run Semantic Release
        # Publishes to PyPI using trusted OIDC if configured
        run: pdm run semantic-release publish
        env:
           # Use the default GitHub token for authentication with GitHub
           {% if secrets is defined %}
           GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
           {% endif %}
           # PyPI token is handled by OIDC - no PYPI_TOKEN needed here
